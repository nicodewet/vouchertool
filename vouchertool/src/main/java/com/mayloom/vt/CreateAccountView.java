package com.mayloom.vt;

import java.util.Date;
import java.util.TimeZone;
import java.util.Vector;
import com.mayloom.vouchserv.man.api.res.RegisterResult;
import com.mayloom.vt.bean.CreateAccountBean;
import com.mayloom.vt.error.VoucherToolErrorHandler;
import com.mayloom.vt.spring.DAO;
import com.mayloom.vt.util.BasicEmail;
import com.mayloom.vt.util.BasicEmailService;
import com.mayloom.vt.util.BasicEmailServiceImpl;
import com.vaadin.data.util.BeanItem;
import com.vaadin.service.ApplicationContext;
import com.vaadin.terminal.Sizeable;
import com.vaadin.terminal.gwt.server.WebApplicationContext;
import com.vaadin.terminal.gwt.server.WebBrowser;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Component;
import com.vaadin.ui.Form;
import com.vaadin.ui.FormLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Panel;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * http://dev.vaadin.com/svn/doc/book-examples/trunk/src/com/vaadin/book/examples/datamodel/BeanItemContainerExample.java
 * 
 * @author Nico
 */
public class CreateAccountView extends AbstractVoucherToolView {

	private static final long serialVersionUID = -2321136194825390963L;
	
	private static Logger logger = LoggerFactory.getLogger(CreateAccountView.class);
	
	private Button loginButton;
	
	private Form createAccountForm;
	
	private static final String EMAIL_SUBJECT = "Welcome to VoucherTool";
	private static final String EMAIL_BODY = "You have registered as a VoucherTool user. If you need any help don't hesitate to contact me. Regards, Nico";
	private static final BasicEmail email = new BasicEmail("nico@vouchertool.com", EMAIL_SUBJECT, EMAIL_BODY, EMAIL_BODY);
	static {
		email.setBcc("nico@nicodewet.com");
	}
	private BasicEmailService emailService = new BasicEmailServiceImpl(!VoucherTool.IS_RUNNING_IN_PROD_MODE);
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public CreateAccountView(Component parent) {
		
		setParent(parent);
		
		Panel panel = buildMainLayoutPanel();
		setCompositionRoot(panel);

		loginButton.addListener(
				
				new ClickListener() {
					public void buttonClick(ClickEvent event) {
						getApplication().getMainWindow().setContent(new LoginView());
					}
				}
			
			);
	}

	@Override
	Component createTopRightComponent() {
		Panel panel = new Panel("Have a VoucherTool account?");
		
		// loginButton
		loginButton = new Button();
		loginButton.setErrorHandler(new VoucherToolErrorHandler());
		loginButton.setCaption("LOGIN");
		loginButton.setImmediate(true);
		loginButton.setWidth("-1px");
		loginButton.setHeight("-1px");
		
		panel.addStyleName("panelexample");
		 
		// The width of a Panel is 100% by default, make it
		// shrink to fit the contents.
		panel.setWidth(Sizeable.SIZE_UNDEFINED, 0);
		 
		// Create a layout inside the panel
		final FormLayout redirectToLoginViewForm = new FormLayout();
		 
		// Have some margin around it.
		redirectToLoginViewForm.setMargin(true);
		 
		// Add some components
		redirectToLoginViewForm.addComponent(loginButton);
		 
		// Set the layout as the root layout of the panel
		panel.setContent(redirectToLoginViewForm);
		return panel;
	}

	@Override
	Component createMiddleCenterComponent() {
		
		// createAccountForm
		createAccountForm = new Form();
		
		// Set the form to act immediately on user input. This is
		// necessary for the validation of the fields to occur immediately
		// when the input focus changes and not just on commit.
		createAccountForm.setImmediate(true);
		
		createAccountForm.setWidth(Sizeable.SIZE_UNDEFINED, 0);
		createAccountForm.setCaption("Create Account");
		// Add a field directly to the layout. This field will
		// not be bound to the data source Item of the form. 
		
		// Set the footer layout. 
		createAccountForm.setFooter(new VerticalLayout());
		 
		createAccountForm.getFooter().addComponent(new Label(""));
		 
		// Have a button bar in the footer.
		HorizontalLayout createAccountFormOkBar = new HorizontalLayout();
		createAccountFormOkBar.setHeight("25px");
		createAccountForm.getFooter().addComponent(createAccountFormOkBar);
		 
		// Enable buffering.
		createAccountForm.setWriteThrough(false);
				
		// The Ok button calls form.commit().
		final Button submitButton = new Button("OK");
		submitButton.setErrorHandler(new VoucherToolErrorHandler());
		submitButton.setEnabled(true);
		submitButton.addListener(new Button.ClickListener() {
	            private static final long serialVersionUID = 6823630748713272361L;

	            public void buttonClick(ClickEvent event) {
	            	
	            		if (!createAccountForm.isValid()) {
	            			
	            			getWindow().showNotification("Please correct invalid form data and try again", Window.Notification.TYPE_WARNING_MESSAGE);
	            			
	            		} else {
	            			
	            			String password = (String)createAccountForm.getField("password").getValue();
	            			String confirmPassword = (String)createAccountForm.getField("confirmPassword").getValue();
	            			
	            			if (password.equals(confirmPassword) == false) {
	            				
	            				getWindow().showNotification("Passwords do not match, please try again", Window.Notification.TYPE_WARNING_MESSAGE);
	            				
	            			} else {
	            				
	            				createAccountForm.commit();
	    	            		
	    		                BeanItem<CreateAccountBean> item = (BeanItem<CreateAccountBean>) createAccountForm.getItemDataSource();
	    		                
	    		                CreateAccountBean data = item.getBean();
	    		                
	    		                logger.debug("Account create request for " + data.getUserName());
	    		                
	    		                boolean userExists = DAO.getVoucherServiceManagement().doesUserExist(data.getUserName());
	    		                
	    		                if (userExists) {
	    		                	getWindow().showNotification("User with username " + data.getUserName() + " already exists.", Window.Notification.TYPE_WARNING_MESSAGE);
	    		                } else {
	    		                	DAO.getVoucherServiceManagement().addNewOrdinaryUser(data.getUserName(), data.getPassword());
	    		                	RegisterResult regResult = DAO.getVoucherServiceManagement().register(data.getUserName());
	    		                	// TODO check the result status?
	    		                	String apiKey = regResult.getVsvId();
	    		                	getWindow().showNotification("Account creation for " + data.getUserName() + " completed.");
	    		                	getApplication().getMainWindow().setContent(new ConsoleView(data.getUserName(), getWindow()));
	    		                	
	    		                	email.setTo(data.getUserName());
	    		                	emailService.sendBasicEmail(email);
	    		                }
	    		                
	    		                //createAccountForm.setVisible(false); // TODO and close it IFF we have a successful registration
	            				
	            			}

	            		}
	            }
	        });
		createAccountFormOkBar.addComponent(submitButton);
		
		createAccountFormOkBar.setComponentAlignment(submitButton, Alignment.TOP_RIGHT);
		// The Reset button calls form.discard().
		createAccountFormOkBar.addComponent(new Button("Reset", createAccountForm, "discard"));
		
		// Create the custom bean. 
		 CreateAccountBean bean = new CreateAccountBean();
		 
		 // Create a bean item that is bound to the bean. 
		 BeanItem<CreateAccountBean> item = new BeanItem<CreateAccountBean>(bean);
		 
		 // Bind the bean item as the data source for the form. TODO https://vaadin.com/book/-/page/components.form.html
		 createAccountForm.setItemDataSource(item);
		
		 createAccountForm.setFormFieldFactory(new CreateAccountFieldFactory());
		 createAccountForm.setValidationVisible(true);
		 
		// Set the order of the items in the form. 
		Vector<String> order = new Vector<String>();
		order.add("userName");
		order.add("password");
		order.add("confirmPassword");
		createAccountForm.setVisibleItemProperties(order);
		
		return createAccountForm;
	}
	

}
