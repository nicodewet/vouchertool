package com.mayloom.vt;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;

import com.google.common.base.Optional;
import com.mayloom.vouchserv.man.api.dto.VoucherBatch;
import com.mayloom.vouchserv.man.api.dto.VoucherBatchHeader;
import com.mayloom.vouchserv.man.api.dto.VoucherBatchOwner;
import com.mayloom.vt.error.VoucherToolErrorHandler;
import com.mayloom.vt.spring.DAO;
import com.mayloom.vt.util.Dates;
import com.vaadin.service.ApplicationContext;
import com.vaadin.terminal.ExternalResource;
import com.vaadin.terminal.Sizeable;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.terminal.gwt.server.WebApplicationContext;
import com.vaadin.terminal.gwt.server.WebBrowser;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Component;
import com.vaadin.ui.FormLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Link;
import com.vaadin.ui.Panel;
import com.vaadin.ui.Table;
import com.vaadin.ui.Window;
import com.vaadin.ui.themes.Reindeer;

import org.apache.commons.lang.time.DateUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This is the view the user sees when logged in to the application.
 * 
 * @author Nico
 */
public class ConsoleView extends AbstractVoucherToolView {
	
	private static Logger logger = LoggerFactory.getLogger(ConsoleView.class);
	
	private Button logOutButton;
	private Panel logOutPanel;
	private String loggedInUsername;
	
	private int timeZoneOffsetHours = 0;
	private SimpleDateFormat DATE_FORMAT_SHORT = new SimpleDateFormat("dd-MM-yyyy");
	private SimpleDateFormat DATE_FORMAT_LONG = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
	
	String browserTimeZone = null;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public ConsoleView(String loggedInUsername, Component parent) {
		
		setParent(parent);
		
		Date serverDate = new Date();
        logger.info("NEW console SESSION created at SERVER time {}", serverDate);
        
        ApplicationContext context = getApplication().getContext();
        if (context instanceof WebApplicationContext) {
            WebBrowser webBrowser = ((WebApplicationContext) context).getBrowser();  
            timeZoneOffsetHours = Dates.tzoToHours(webBrowser.getTimezoneOffset());
            
            browserTimeZone = "Dates displayed in your time zone: " + determineBrowserTimeZone(webBrowser) + " - UTC ";
            if (timeZoneOffsetHours >= 0) {
            	browserTimeZone += "+" + timeZoneOffsetHours;
            } else {
            	browserTimeZone += "-" + timeZoneOffsetHours;
            }
            logger.info("Browser UTC offset in hours: {}", timeZoneOffsetHours);
        }
		
		this.loggedInUsername = loggedInUsername;
		Panel panel = buildMainLayoutPanel();
		setCompositionRoot(panel);

		logOutButton.addListener(
				
					new ClickListener() {
						public void buttonClick(ClickEvent event) {							
							getApplication().close();
							getApplication().getMainWindow().setContent(new LoginView());
						}
					}
				
				);	
	}
	
	private String determineBrowserTimeZone(WebBrowser webBrowser) {
		int timeZoneOffsetMillis = webBrowser.getRawTimezoneOffset();
		String [] ids = TimeZone.getAvailableIDs(timeZoneOffsetMillis);
		return ids[0];
	}

	@Override
	Component createTopRightComponent() {
		logOutPanel = new Panel("Log out");
		
		// logOutButton
		logOutButton = new Button();
		logOutButton.setErrorHandler(new VoucherToolErrorHandler());
		logOutButton.setCaption("LOG OUT");
		logOutButton.setImmediate(true);
		logOutButton.setWidth("-1px");
		logOutButton.setHeight("-1px");
		
		logOutPanel.addStyleName("panelexample"); 
		// The width of a Panel is 100% by default, make it
		// shrink to fit the contents.
		logOutPanel.setWidth(Sizeable.SIZE_UNDEFINED, 0);
		 
		// Create a layout inside the panel
		final FormLayout form = new FormLayout();
		 
		// Have some margin around it.
		form.setMargin(true);
		 
		// Add some components
		form.addComponent(logOutButton);
		 
		// Set the layout as the root layout of the panel
		logOutPanel.setContent(form);
		return logOutPanel;
	}

	@Override
	Component createMiddleCenterComponent() {
		
		Panel panel = new Panel();
		panel.setCaption("API CONSOLE");
		panel.addComponent(new Label(this.browserTimeZone));
		panel.setWidth(Sizeable.SIZE_UNDEFINED, 0);
				
		Panel linkPanel = new Panel();
		Link link = createSoapWsdlLink();
		linkPanel.addComponent(link);
		// The "light" style is a predefined style without borders
		linkPanel.addStyleName(Reindeer.PANEL_LIGHT);
		
		panel.addComponent(linkPanel);
		
		/* Create the table with no caption. */
		Table table = new Table();

		/* Define the names and data types of columns.
		 * The "default value" parameter is meaningless here. */
		table.addContainerProperty("Action", Button.class,  null);
		table.addContainerProperty("API Key", String.class,  null);
		table.addContainerProperty("Created", String.class, null);
		table.addContainerProperty("Last Used", String.class, null);
		table.addContainerProperty("Next Batch Serial Start", Long.class, null);
			
		Optional<List<VoucherBatchOwner>> optRegistrations = DAO.getVoucherServiceManagement().getRegistrations(loggedInUsername);
		if (optRegistrations.isPresent()) {
			
			int i = 0;
			for (VoucherBatchOwner vbo : optRegistrations.get()) {
				Date tzModifiedCreationDate = vbo.getCreationDate(); 
				String creationDateStr = ""; 
				if (vbo.getCreationDate() != null) {
					tzModifiedCreationDate = DateUtils.addHours(vbo.getCreationDate(), timeZoneOffsetHours);
					creationDateStr = DATE_FORMAT_SHORT.format(tzModifiedCreationDate);
				}
				Date tzModifiedLastUpdateDate = vbo.getLastUpdate();  
				String lastModifiedDateStr = "";
				if (vbo.getLastUpdate() != null) {
					tzModifiedLastUpdateDate = DateUtils.addHours(vbo.getLastUpdate(), timeZoneOffsetHours);
					lastModifiedDateStr = DATE_FORMAT_SHORT.format(tzModifiedLastUpdateDate); 
				}
				Button actionButton = null;
				if (vbo.getNextBatchStartSerialNumber() != 0) {
					actionButton = new Button("Explore");
					actionButton.setData(vbo.getCode());
					actionButton.addListener(new Button.ClickListener(
							) {
						
						@Override
						public void buttonClick(ClickEvent event) {
							String apiKey = (String)event.getButton().getData();
							String exploreApiKey = "Explore API KEY: " + apiKey;
							
							Table voucherBatchesTable = new Table();
							voucherBatchesTable.addContainerProperty("Batch number", Integer.class, null);
							voucherBatchesTable.addContainerProperty("Creation date", String.class, null);
							voucherBatchesTable.addContainerProperty("Expiry date", String.class, null);
							voucherBatchesTable.addContainerProperty("Pin type", String.class, null);
							voucherBatchesTable.addContainerProperty("Pin length", Integer.class, null);
							voucherBatchesTable.addContainerProperty("Requested size", Integer.class, null);
							voucherBatchesTable.addContainerProperty("Generated size", Integer.class, null);
							Optional<List<VoucherBatchHeader>> optVBList = DAO.getVoucherServiceManagement().getVoucherBatches(apiKey);
							if (optVBList.isPresent()) {
								for (VoucherBatchHeader vBatch: optVBList.get()) {
									
									String vBatchCreationDateStr = null; 
									if (vBatch.getCreationDate() != null) {
										Date tzModvBatchCreationDate = DateUtils.addHours(vBatch.getCreationDate(), timeZoneOffsetHours);
										vBatchCreationDateStr = DATE_FORMAT_LONG.format(tzModvBatchCreationDate);
									}
									
									Integer batchNumber = vBatch.getBatchNumber();
									
									String vBatchExpiryDateStr = null;
									if (vBatch.getExpiryDate() != null) {
										Date tzModvBatchExpiryDate = DateUtils.addHours(vBatch.getExpiryDate(), timeZoneOffsetHours);
										vBatchExpiryDateStr = DATE_FORMAT_LONG.format(tzModvBatchExpiryDate);
									}
									
									String pinType = vBatch.getRequestedPinType();
									Integer requestedSize = vBatch.getRequestedSize();
									Integer generatedSize = vBatch.getGeneratedSize();
									Integer pinLength = vBatch.getRequestedPinLength();
									voucherBatchesTable.addItem(new Object[]{batchNumber, vBatchCreationDateStr, vBatchExpiryDateStr, pinType, pinLength, requestedSize, generatedSize}, batchNumber);
								}
							} else {
								//throw new IllegalStateException();
							}
							Window subWindow = new Window();
							voucherBatchesTable.setPageLength(voucherBatchesTable.size());
							subWindow.addComponent(voucherBatchesTable);
							subWindow.setCaption(exploreApiKey);
							getWindow().addWindow(subWindow);
							subWindow.center();
							subWindow.setWidth(70, UNITS_PERCENTAGE);
						}
						
					});
				}
				
				table.addItem(new Object[]{actionButton, vbo.getCode(), creationDateStr, lastModifiedDateStr, Long.valueOf(vbo.getNextBatchStartSerialNumber())}, new Integer(i));
				i++;
			}
			
		} else {
			
			logger.error("No API Keys for {}", loggedInUsername);
			
		}
		
		table.setPageLength(table.size());
		
		panel.addComponent(table);
		return panel;
	}

	private Link createSoapWsdlLink() {
		
		Link link = new Link("VoucherTool SOAP API", new ExternalResource("https://vouchertool.com/vouchserv/vouchserv.wsdl"));
		// Open the URL in a new window/tab
		link.setTargetName("_blank");
		// Indicate visually that it opens in a new window/tab
		link.setIcon(new ThemeResource("icons/external-link.png"));
		link.addStyleName("icon-after-caption");
		return link;
	}

}
