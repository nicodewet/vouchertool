package com.mayloom.vt;

import java.util.Date;
import java.util.Vector;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;



import com.google.common.base.Optional;
import com.mayloom.vouchserv.man.api.req.BatchGenRequest;
import com.mayloom.vouchserv.man.api.req.PinType;
import com.mayloom.vouchserv.man.api.req.VoucherBatchType;
import com.mayloom.vouchserv.man.api.res.BatchGenResult;
import com.mayloom.vouchserv.man.api.res.RegisterResult;
import com.mayloom.vouchserv.man.api.res.code.ResultStatusCode;
import com.mayloom.vouchserv.man.api.dto.Voucher;
import com.mayloom.vouchserv.man.api.dto.VoucherBatch;
import com.mayloom.vt.bean.GenerateAnonymousVouchersBean;
import com.mayloom.vt.bean.LoginBean;
import com.mayloom.vt.error.VoucherToolErrorHandler;
import com.mayloom.vt.export.SaveToExcelLink;
import com.mayloom.vt.spring.DAO;
import com.vaadin.data.util.BeanItem;
import com.vaadin.event.ShortcutAction.KeyCode;
import com.vaadin.terminal.Sizeable;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Embedded;
import com.vaadin.ui.Form;
import com.vaadin.ui.FormLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Panel;
import com.vaadin.ui.Table;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;
import com.vaadin.ui.themes.Reindeer;

public class LoginView extends AbstractVoucherToolView {
	
	private static Logger logger = LoggerFactory.getLogger(LoginView.class);
			
	private Button createAccountButton;
	
	private Panel createNewAccountPanel;

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public LoginView() {
		
		Panel panel = buildMainLayoutPanel();
		setCompositionRoot(panel);

		createAccountButton.addListener(
				
					new ClickListener() {
						public void buttonClick(ClickEvent event) {
							getApplication().getMainWindow().setContent(new CreateAccountView(getWindow()));
						}
					}
				
				);
	}

	@Override
	Component createTopRightComponent() {
		
		createNewAccountPanel = new Panel("New to VoucherTool?");
		
		createAccountButton = new Button();
		createAccountButton.setErrorHandler(new VoucherToolErrorHandler());
		createAccountButton.setCaption("CREATE AN ACCOUNT");
		createAccountButton.setImmediate(true);
		createAccountButton.setWidth("-1px");
		createAccountButton.setHeight("-1px");
		
		createNewAccountPanel.addStyleName("panelexample");
		 
		// The width of a Panel is 100% by default, make it
		// shrink to fit the contents.
		createNewAccountPanel.setWidth(Sizeable.SIZE_UNDEFINED, 0);
		 
		// Create a layout inside the panel
		final FormLayout form = new FormLayout();
		 
		// Have some margin around it.
		form.setMargin(true);
		 
		// Add some components
		form.addComponent(createAccountButton);
		form.addComponent(new Label("Needed to use VoucherTool's rich SOAP API"));
		
		 
		// Set the layout as the root layout of the panel
		createNewAccountPanel.setContent(form);
		
		return createNewAccountPanel;
		
	}

	@Override
	Component createMiddleCenterComponent() {
		
		HorizontalLayout horizontalLayout = new HorizontalLayout();
		horizontalLayout.setWidth("100.0%");
		horizontalLayout.setMargin(true);
		
		
		Table table = new Table("Generated Unique Codes");
		SaveToExcelLink downloadLink = new SaveToExcelLink();
		
		/**
		 * LHS COLUMN
		 */
		Form generateVoucherForm = createGenerateVoucherForm("Generate Unique Code Batch - Up To 1000 Codes", table, downloadLink);
		horizontalLayout.addComponent(generateVoucherForm);
		horizontalLayout.setComponentAlignment(generateVoucherForm, Alignment.TOP_LEFT);
		table.setVisible(false); // generate voucher form will set to visible if we have generated vouchers
		
		/**
		 * MIDDLE COLUMN
		 */
		horizontalLayout.addComponent(table);
		horizontalLayout.setComponentAlignment(table, Alignment.TOP_CENTER);
		downloadLink.setVisible(false);
		horizontalLayout.addComponent(downloadLink);
		
		/**
		 * RHS COLUMN
		 */
		Form loginForm = createLoginForm("Secure Login");
		horizontalLayout.addComponent(loginForm);
		horizontalLayout.setComponentAlignment(loginForm, Alignment.TOP_RIGHT);
		
		return horizontalLayout;
	}
	
	private Form createGenerateVoucherForm(String formCaption, final Table generatedVouchersTable, final SaveToExcelLink saveToExcelLink) {
		
		final Form generateVoucherForm = new Form();
		generateVoucherForm.setCaption(formCaption);
		
		// Set the form to act immediately on user input. This is
		// necessary for the validation of the fields to occur immediately
		// when the input focus changes and not just on commit.
		generateVoucherForm.setImmediate(true);
		generateVoucherForm.setWidth(Sizeable.SIZE_UNDEFINED, 0);
				
		generateVoucherForm.setCaption(formCaption);
				
		// Set the footer layout. 
		generateVoucherForm.setFooter(new VerticalLayout());
				 
		generateVoucherForm.getFooter().addComponent(new Label("Provided to demonstrate a small portion of VoucherTool's capabilities"));
				 
		// Have a button bar in the footer.
		HorizontalLayout generateVoucherFormOkBar = new HorizontalLayout();
		generateVoucherFormOkBar.setHeight("25px");
		generateVoucherForm.getFooter().addComponent(generateVoucherFormOkBar);
				 		
		// Enable buffering.
		generateVoucherForm.setWriteThrough(false);
						
		// The Ok button calls form.commit().
		final Button submitGenerateVoucherFormButton = new Button("OK");
		submitGenerateVoucherFormButton.setErrorHandler(new VoucherToolErrorHandler());
		submitGenerateVoucherFormButton.setEnabled(true);
		
		submitGenerateVoucherFormButton.addListener(new Button.ClickListener() {
            private static final long serialVersionUID = 6823630748713272361L;

            public void buttonClick(ClickEvent event) {
            	
            		if (!generateVoucherForm.isValid()) {
            			
            			getWindow().showNotification("Please correct invalid form data and try again", Window.Notification.TYPE_WARNING_MESSAGE);
            			
            		} else {
            				generatedVouchersTable.removeAllItems();
            				
            				generateVoucherForm.commit();
    	            		
    		                BeanItem<GenerateAnonymousVouchersBean> item = (BeanItem<GenerateAnonymousVouchersBean>) generateVoucherForm.getItemDataSource();
    		                
    		                GenerateAnonymousVouchersBean formData = item.getBean();
    		                logger.info(Integer.toString(formData.getConvertedVoucherNumber()));
    		                logger.info(Integer.toString(formData.getConvertedPinLength()));
    		                logger.info(formData.getConvertedPinType().toString());
    		                
    		                if (formData.getConvertedVoucherNumber() <= 1000) {
    		                	
    		                	RegisterResult registerResult = DAO.getVoucherServiceManagement().register(DAO.GENERATOR_USERNAME);
    		                	if (registerResult.getResultStatusCode() == ResultStatusCode.SUCCESS) {
    		                		
    		                		String vsvId = registerResult.getVsvId();
        		            		BatchGenRequest req = new BatchGenRequest.Builder(DAO.GENERATOR_USERNAME, vsvId, formData.getConvertedVoucherNumber(), VoucherBatchType.REGULAR).
        		            									pinLength(formData.getConvertedPinLength()).pinType(formData.getConvertedPinType()).build();
        		            		
        		            		BatchGenResult batchGenResult = DAO.getVoucherServiceManagement().generateVoucherBatch(DAO.GENERATOR_USERNAME, req);
        		      
        		            		VoucherBatch voucherBatch = DAO.getVoucherServiceManagement().getVoucherBatch(DAO.GENERATOR_USERNAME, vsvId, batchGenResult.getBatchNumber());
        		            		
        		            		logger.info("Received {} user vouchers", voucherBatch.getVouchers().size());
        		            		
        		            		generatedVouchersTable.addContainerProperty("Unique Code", String.class,  null);
        		            		
        		            		int i=0;
        		            		for (Voucher voucher : voucherBatch.getVouchers()) {
        		            			generatedVouchersTable.addItem(new Object[]{voucher.getPin()}, new Integer(i));
        		            			i++;
        		            		}
        		            		
        		            		generatedVouchersTable.setVisible(true);
        		            		saveToExcelLink.setGenerationResults(voucherBatch.getVouchers(), vsvId);
        		            		saveToExcelLink.attach();
        		            		saveToExcelLink.setVisible(true);
        		            		generatedVouchersTable.requestRepaint();
        		            		String message = voucherBatch.getVouchers().size() + " unique codes generated";
        		            		getWindow().showNotification(message, Window.Notification.TYPE_HUMANIZED_MESSAGE);
        		            		
    		                	} else {
    		                		/**
    		                		 * TODO: Error handling, what to do if operations fail?
    		                		 */
    		                		logger.error("Voucher Service returned an error trying to register for {}", DAO.GENERATOR_USERNAME);
    		                		getWindow().showNotification("Unable to fulfill your request", Window.Notification.TYPE_ERROR_MESSAGE);
    		                	}
    		            		
    		            		
    		            		
    		                } else {
    		                	throw new RuntimeException("Only supporting gen of up to 1000 vouchers");
    		                }
    		                
    		                // 
    		              
            			}

            		}
            }
        );
		generateVoucherFormOkBar.addComponent(submitGenerateVoucherFormButton);
		generateVoucherFormOkBar.setComponentAlignment(submitGenerateVoucherFormButton, Alignment.TOP_RIGHT);
		
		// Create the custom bean. 
		GenerateAnonymousVouchersBean bean = new GenerateAnonymousVouchersBean();
				 
		// Create a bean item that is bound to the bean. 
		BeanItem<GenerateAnonymousVouchersBean> item = new BeanItem<GenerateAnonymousVouchersBean>(bean);
				 
		// Bind the bean item as the data source for the form. TODO https://vaadin.com/book/-/page/components.form.html
		generateVoucherForm.setItemDataSource(item);
		
		generateVoucherForm.setFormFieldFactory(new GenerateAnonymousVouchersFieldFactory());
		
		generateVoucherForm.setValidationVisible(false);
		
		// Set the order of the items in the form. 
		Vector<String> order = new Vector<String>();
		order.add("voucherNumber");
		order.add("pinLength");
		order.add("pinType");
		generateVoucherForm.setVisibleItemProperties(order);
		
		return generateVoucherForm;
		
	}
	
	private Form createLoginForm(String formCaption) {
		
		final Form loginForm = new Form();
		
		// Set the form to act immediately on user input. This is
		// necessary for the validation of the fields to occur immediately
		// when the input focus changes and not just on commit.
		loginForm.setImmediate(true);
		loginForm.setWidth(Sizeable.SIZE_UNDEFINED, 0);
				
		loginForm.setCaption(formCaption);
				
		// Set the footer layout. 
		loginForm.setFooter(new VerticalLayout());
				 
		loginForm.getFooter().addComponent(new Label(""));
				 
		// Have a button bar in the footer.
		HorizontalLayout okbar = new HorizontalLayout();
		okbar.setHeight("25px");
		loginForm.getFooter().addComponent(okbar);
				 		
		// Enable buffering.
		loginForm.setWriteThrough(false);
						
		// The Ok button calls form.commit().
		final Button submitButton = new Button("OK");
		submitButton.setClickShortcut(KeyCode.ENTER);
		submitButton.setEnabled(true);
		submitButton.setErrorHandler(new VoucherToolErrorHandler());
		
		submitButton.addListener(new Button.ClickListener() {
            private static final long serialVersionUID = 6823630748713272361L;

            public void buttonClick(ClickEvent event) {
            	
            		if (!loginForm.isValid()) {
            			
            			getWindow().showNotification("Please correct invalid form data and try again", Window.Notification.TYPE_WARNING_MESSAGE);
            			
            		} else {
            			
            				loginForm.commit();
    	            		
    		                BeanItem<LoginBean> item = (BeanItem<LoginBean>) loginForm.getItemDataSource();
    		                
    		                LoginBean data = item.getBean();
    		                
    		                String username = data.getUserName();
    		                String password = data.getPassword();
    		                boolean logInUser = DAO.getVoucherServiceManagement().doesUserExist(username, password);
    		               
    		                if (logInUser) { 
    		                	
    		                	getWindow().showNotification("Log in successful", Window.Notification.TYPE_HUMANIZED_MESSAGE);
    		                	ConsoleView consoleView = new ConsoleView(username, getWindow());
    		                	getApplication().getMainWindow().setContent(consoleView);
    		                	
    		                } else {
    		                	
    		                	getWindow().showNotification("Log in failed", Window.Notification.TYPE_WARNING_MESSAGE);
    		                	
    		                }
    		              
            			}

            		}
            }
        );
		okbar.addComponent(submitButton);
		okbar.setComponentAlignment(submitButton, Alignment.TOP_RIGHT);
		
		// Create the custom bean. 
		LoginBean bean = new LoginBean();
				 
		// Create a bean item that is bound to the bean. 
		BeanItem<LoginBean> item = new BeanItem<LoginBean>(bean);
				 
		// Bind the bean item as the data source for the form. TODO https://vaadin.com/book/-/page/components.form.html
		loginForm.setItemDataSource(item);
		
		loginForm.setFormFieldFactory(new CreateAccountFieldFactory());
		
		loginForm.setValidationVisible(false);
		
		// Set the order of the items in the form. 
		Vector<String> order = new Vector<String>();
		order.add("userName");
		order.add("password");
		loginForm.setVisibleItemProperties(order);
		
		return loginForm;
	}
}
